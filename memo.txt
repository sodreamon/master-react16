3:49

### Fragment
import React, { Component, Fragment💛 } from "react";

class ReturnTypes extends Component {
  render() {
    return(
      <Fragment>💛
        <header></header>
        <div></div>
        <footer></footer>
      </Fragment>
    )
  }
}









### NO Fragment
[1]
class ReturnTypes extends Component {
  render() {
    return(
      <span>💛
        <header></header>
        <div></div>
        <footer></footer>
      </span>
    )
  }
}

[2]
class ReturnTypes extends Component {
  render() {
    return([ 💛     
        <header key={1}💛></header>
        <div key={2}></div>
        <footer key={3}></footer>      
    ])
  }
}













### string return
import React, { Component, Fragment } from "react";

class ReturnTypes extends Component {
  render() {
    return "hello";💛
  }
}

class App extends Component {
  render() {
    return (
      <Fragment>
        <ReturnTypes />💛
      </Fragment>
    );
  }
}












### portal
[html]
<body>
    <header>
      <h1>can't touch this</h1>
      <span id="touchme"></span>💛
    </header>
    <div id="root"></div>



[App.js]
import { createPortal } from "react-dom";💛

class Portals extends Component {
  render() {
    return createPortal(<Message />, document.getElementById("touchme"));💛
  }
}

const Message = () => "Just touched it";

class App extends Component {
  render() {
    return (
      <Fragment>
        <Portals />💛
      </Fragment>
    );
  }
}














### setTimeout
setTimeout(() => {💛
      this.setState({
        friends: undefined
      });
    }, 2000💛);













### map
class ErrorMaker extends Component {
  state = {
    friends: ["qwe", "asd", "zxc", "rty"]
  };
  
  render() {
    const { friends } = this.state;

    return friends.map(friend => `${friend} `);💛
  }
}















### ErrorMaker
class ErrorMaker extends Component {
  state = {
    friends: ["qwe", "asd", "zxc", "rty"]
  };

  componentDidMount = () => {
    setTimeout(() => {
      this.setState({
        friends: undefined💛
      });
    }, 2000);
  };

  render() {
    const { friends } = this.state;

    return friends.map(friend => `${friend} `);💛
  }
}













### catch error [개별작업]
const ErrorFallback = () => "sorry something went wrong";💛

class App extends Component {
  state={
    hasError: false💛
  }

  componentDidCatch = (error, info) => {
    console.log(`catched ${error} the info i have ${JSON.stringify(info)}`);💛
    this.setState({ hasError: true });💛
  };

  render() {
      const { hasError } = this.state;

    return (
      <Fragment>
        <ErrorMaker />
        {hasError ? <ErrorFallback /> : <ErrorMaker />}💛
      </Fragment>
    );
  }
}















### catch error [대량작업]
const ErrorFallback = () => "sorry something went wrong";💛

const BoundaryHOC💛 = ProtactedComponent💛 =>
  class BoundaryHOC extends Component {
    state = {
      hasError: false💛
    };

    componentDidCatch = (error, info) => {
      this.setState({ hasError: true })💛;
    };

    render() {
      const { hasError } = this.state;
      if(hasError){
        return <ErrorFallback />💛
      }else{
        return <ProtactedComponent />💛
      }
    }
  };

  class ErrorMaker extends Component {}

  const PErrorMaker = BoundaryHOC(ErrorMaker);💛

  class App extends Component {
  render() {
    return (
      <Fragment>
        <PErrorMaker />💛
      </Fragment>
    );
  }
}

export default BoundaryHOC(App);💛